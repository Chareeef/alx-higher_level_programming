This test file is for the function defined as:
def lazy_matrix_mul(m_a, mb):

	***


# Importing numpy

	>>> import numpy as np

# Importing the function

	>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

	---

# Tests for different exceptions:

	>>> m_a = [9, 6, 4]
	>>> m_b = 7
	>>> lazy_matrix_mul(m_a, m_b) # doctest: +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
	ValueError: matmul: Input operand 1 does not have enough dimensions (has 0, gufunc core with signature (n?,k),(k,m?)->(n?,m?) requires 1)

		***

	>>> m_a = [9, 6, 4]
	>>> m_b = [['u'], [5, 8, 22]]
	>>> lazy_matrix_mul(m_a, m_b)
	Traceback (most recent call last):
	ValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (2,) + inhomogeneous part.

		***

	>>> m_a = [[0, False], [1, True]]
	>>> m_b = [[]]
	>>> lazy_matrix_mul(m_a, m_b)
	Traceback (most recent call last):
	ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 1 is different from 2)

	>>> m_a = [[], []]
	>>> m_b = [[8.7, 5]]
	>>> lazy_matrix_mul(m_a, m_b)
	Traceback (most recent call last):
	ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 1 is different from 0)

		***

	>>> m_a = [[9], [6, 4]]
	>>> m_b = [[8+7, '9', 2], [5, 1]]
	>>> lazy_matrix_mul(m_a, m_b)
	Traceback (most recent call last):
	ValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (2,) + inhomogeneous part.

		***

	>>> m_a = [[9, 6, 4], [1, 2, 3], [4, 6, 7]]
	>>> m_b = [[9, 6, 4], [1, 2, 3, 3.5], [4, 6, 7]]
	>>> lazy_matrix_mul(m_a, m_b)
	Traceback (most recent call last):
	ValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (3,) + inhomogeneous part.

		***
	
	>>> m_a = [[9, 6, 4],
	...	   [1, 2, 3],
	...        [4, 6, 7]]
	>>> m_b = [[9, 6, 4],
	...        [1, 2, 3],
	...	   [6, 5.5, 5],
	...        [4, 6, 7]]
	>>> lazy_matrix_mul(m_a, m_b)
	Traceback (most recent call last):
	ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 4 is different from 3)

		______

# Tests for good products:

>>> m_a = [[1, 2],
...        [3, 4]]
>>> m_b = [[5, 6],
...        [7, 8]]
>>> print(lazy_matrix_mul(m_a, m_b)) # doctest: +NORMALIZE_WHITESPACE
[[19 22] [43 50]]

>>> m_a = [[1, 2, 3],
...        [4, 5, 6]]
>>> m_b = [[7, 8],
...        [9, 10],
...        [11, 12]]
>>> print(lazy_matrix_mul(m_a, m_b)) # doctest: +NORMALIZE_WHITESPACE
[[ 58  64]
 [139 154]]

>>> m_a = [[1, 2, 3],
...        [4, 5, 6],
...        [7, 8, 9]]
>>> m_b = [[9, 8, 7],
...        [6, 5, 4],
...        [3, 2, 1]]
>>> print(lazy_matrix_mul(m_a, m_b)) # doctest: +NORMALIZE_WHITESPACE
[[ 30 24 18]
 [ 84 69 54]
 [138 114 90]]

